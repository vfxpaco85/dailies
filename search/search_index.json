{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home page (TODO)","text":""},{"location":"setup_instructions/","title":"Setup Instructions for Dailies Tool","text":""},{"location":"setup_instructions/#introduction","title":"Introduction","text":"<p>This document provides setup instructions for the Dailies Tool, a utility for creating videos and image sequences from given image sequence paths, often used in VFX, animation, or film production. The tool allows users to take image sequences (e.g., EXR) and convert them into videos (e.g., QT) or other image formats (e.g., JPG), with options to downsize resolution, change format, or apply other transformations.</p>"},{"location":"setup_instructions/#prerequisites","title":"Prerequisites","text":"<p>Before setting up the Dailies Tool, make sure you have the following installed:</p> <ul> <li>Python 3.x: Required to run the tool.</li> <li>FFmpeg: For video processing and conversion.</li> <li>Nuke: For advanced compositing and other VFX/animation tasks.</li> <li>RV: For reviewing and playback of sequences.</li> </ul> <p>You also need access to the repository containing the Dailies Tool source code.</p>"},{"location":"setup_instructions/#1-clone-the-repository","title":"1. Clone the Repository:","text":"<p>First, clone the repository to your local machine. You can do this using Git:</p> <pre><code>git clone https://your-repository-url.git\ncd your-repository-folder\n</code></pre>"},{"location":"setup_instructions/#2-install-python-dependencies","title":"2. Install Python Dependencies:","text":"<p>To install the required Python packages for the application, run the following command in your terminal:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>This will install all the necessary Python libraries the Dailies Tool depends on.</p>"},{"location":"setup_instructions/#3-install-external-software","title":"3. Install External Software:","text":"<p>The following external software must be installed separately. Ensure that these executables are accessible from your system's <code>PATH</code>.</p> <ul> <li>FFmpeg: Download and install FFmpeg from the official website: FFmpeg Downloads</li> <li> <p>Once installed, ensure that the <code>ffmpeg.exe</code> file is in your system's <code>PATH</code>.</p> </li> <li> <p>Nuke: Nuke is a proprietary software. Please download and install it from the official website: Nuke Downloads</p> </li> <li> <p>Ensure that the <code>nuke</code> executable and Python bindings are available and accessible from your environment.</p> </li> <li> <p>RV: RV is also proprietary software. Install it from RV Downloads</p> </li> <li>Ensure the <code>rv</code> executable is added to your system's <code>PATH</code>.</li> </ul>"},{"location":"setup_instructions/#4-ensure-correct-path-configuration","title":"4. Ensure Correct Path Configuration:","text":"<p>Make sure that the paths to the executables for FFmpeg, Nuke, and RV are correctly set in your system's environment variables so that they can be accessed from anywhere.</p>"},{"location":"setup_instructions/#5-modify-the-constantmainpy-and-constanttrackingpy-files","title":"5. Modify the <code>constant.main.py</code> and <code>constant.tracking.py</code> Files:","text":"<p>The Dailies Tool relies on certain configurations that should be set in the <code>constant</code> module files. These include paths, credentials, and other system-specific information. </p>"},{"location":"setup_instructions/#constantmainpy","title":"<code>constant.main.py</code>","text":"<p>The <code>constant.main.py</code> file defines core settings for logging, temporary directories, and slate templates.</p> <p>Ensure the following values are correctly configured:</p> <pre><code># Set the log file path\nLOG_FILE_PATH = \"C:/code/python/vfx/dailies/dailies_tool.log\"\n\n# Log format\nLOG_FORMAT = \"%(asctime)s - %(levelname)s - %(message)s\"\n\n# Temporary file directory\nBASE_TMP_DIRECTORY = \"C:/Users/info/AppData/Local/Temp\"\nDEFAULT_TMP_DIRECTORY = get_daily_tmp_directory(BASE_TMP_DIRECTORY)\n\n# Preset and template directories\nDEFAULT_PRESET_DIRECTORY = \"C:/code/python/vfx/dailies/preset\"\nDEFAULT_TEMPLATE_DIRECTORY = \"C:/code/python/vfx/dailies/template\"\n\n# Environment variable configuration\nENV_VAR_CONFIG = {\n    \"path\": \"VIDEO_PATH\",\n    \"version\": \"VERSION_NAME\",\n    \"link\": \"LINK_NAME\",\n    \"description\": \"DESCRIPTION\",\n    \"artist\": \"ARTIST\",\n    \"task\": \"TASK\",\n    \"project\": \"PROJECT\",\n    \"project_id\": \"PROJECT_ID\",\n    \"entity_name\": \"ENTITY_NAME\",\n    \"entity_id\": \"ENTITY_ID\",\n    \"entity_type\": \"ENTITY_TYPE\",\n    \"artist_name\": \"ARTIST_NAME\",\n    \"artist_id\": \"ARTIST_ID\",\n}\n\n# Frame padding and start number\nFRAME_PADDING_FORMAT = '%03d'\nFRAME_START_NUMBER = '001'\n\n# Slate template for generating slate information\nDEFAULT_SLATE_TEMPLATE = \"\"\"\nVERSION: {version}\nFILE: {file}\nDESCRIPTION: {description}\nARTIST: {artist}\nLINK: {link}\nTASK: {task}\nPROJECT: {project}\nRESOLUTION: {resolution}\nFPS: {fps}\n\"\"\"\n</code></pre>"},{"location":"setup_instructions/#constanttrackingpy","title":"<code>constant.tracking.py</code>","text":"<p>The <code>constant.tracking.py</code> file defines the configuration for tracking software, API credentials, and the tracking engine to use.</p> <p>Ensure the following values are correctly configured:</p> <pre><code># Tracking engine settings\nTRACKING_ENGINE = os.getenv(\"TRACKING_ENGINE\", \"shotgun\")\nTRACKING_LOGIN_USER = os.getenv(\"TRACKING_LOGIN_USER\", \"USR\")\nTRACKING_API_TOKEN = os.getenv(\"TRACKING_API_TOKEN\", \"PWD\")\n\n# API URLs for tracking engines\nAPI_URLS = {\n    \"shotgun\": \"https://your-shotgun-instance.com/api/v1\",\n    \"ftrack\": \"https://your-ftrack-instance.com/api/v1\",\n    \"kitsu\": \"https://your-kitsu-instance.com/api/v1\",\n    \"flow\": \"https://your-flow-instance.com/api/v1\",\n}\n</code></pre>"},{"location":"setup_instructions/#6-running-the-tool","title":"6. Running the Tool:","text":"<p>Once the setup is complete, you can start using the Dailies Tool to create videos and image sequences from your input image sequences.</p> <ul> <li>Run the Tool: You can launch the tool by running the following command from the project directory:</li> </ul> <pre><code>python dailiy.py\n</code></pre> <ul> <li> <p>Specify Input Path: When prompted, provide the path to your input image sequence or EXR files.</p> </li> <li> <p>Choose Output Settings: You\u2019ll be asked to choose the output format (such as EXR, JPG, or video) and other render settings (e.g., downsize resolution, frame rate adjustments).</p> </li> <li> <p>Select External Engine: Choose the appropriate external software (e.g., FFmpeg, Nuke, RV) for processing the output.</p> </li> </ul>"},{"location":"setup_instructions/#7-updating-the-tool","title":"7. Updating the Tool:","text":"<p>If you need to update or add new features, follow these steps: - Pull the latest changes from the repository. - Install any new dependencies by running:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <ul> <li>Update configuration files as necessary (e.g., <code>constant.main.py</code>, <code>constant.tracking.py</code>, <code>constant.engine.py</code>).</li> </ul>"},{"location":"setup_instructions/#8-troubleshooting","title":"8. Troubleshooting:","text":"<p>If you encounter any issues, make sure the following checks are done:</p> <ul> <li>Verify that your external tools (FFmpeg, Nuke, RV) are installed correctly and accessible from the <code>PATH</code>.</li> <li>Ensure that the <code>constant</code> files have been modified to include the correct paths, API keys, or other project-specific information.</li> <li>If the tool doesn\u2019t run as expected, try checking the error logs or console output for more detailed information.</li> </ul> <p>With these instructions, you should be able to run and configure the Dailies Tool. If you encounter any issues, refer to the troubleshooting section for guidance, or feel free to consult the project's README for more details.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>If you're encountering issues with the Dailies Tool, refer to the following common problems and solutions. If you're unable to resolve the issue, consider checking the logs or console output for more detailed information.</p>"},{"location":"troubleshooting/#1-issue-command-not-found-for-ffmpeg-nuke-or-rv","title":"1. Issue: \"Command not found\" for FFmpeg, Nuke, or RV","text":""},{"location":"troubleshooting/#solution","title":"Solution:","text":"<p>This error usually occurs when the required external software (FFmpeg, Nuke, or RV) is not correctly added to your system's <code>PATH</code>.</p> <p>To fix this:</p> <ul> <li>FFmpeg:</li> <li>Ensure that FFmpeg is installed and that the <code>ffmpeg</code> executable is in your system's <code>PATH</code>.</li> <li>You can verify this by running:</li> </ul> <pre><code>  # Run this command to check if FFmpeg is accessible from the terminal\n  ffmpeg -version\n</code></pre> <p>If the command is not recognized, add FFmpeg to your <code>PATH</code> or provide the full path to the executable in the Dailies Tool\u2019s configuration.</p> <ul> <li>Nuke:</li> <li>Make sure that the <code>nuke</code> executable and its Python bindings are available in your environment.</li> <li>You can check if Nuke is accessible by running:</li> </ul> <pre><code>  # Run this command to check if Nuke is accessible from the terminal\n  nuke --version\n</code></pre> <ul> <li>RV:</li> <li>Ensure that the <code>rv</code> executable is accessible from your terminal.</li> <li>Test it by running:</li> </ul> <pre><code>  # Run this command to check if RV is accessible from the terminal\n  rv --version\n</code></pre>"},{"location":"troubleshooting/#additional-notes","title":"Additional Notes:","text":"<p>If you installed the software but it's still not recognized, check the installation paths and update the system's <code>PATH</code> variable to include the directories where the executables are located.</p>"},{"location":"troubleshooting/#2-issue-missing-or-incorrect-configuration-in-constantspy","title":"2. Issue: Missing or Incorrect Configuration in <code>constants.py</code>","text":""},{"location":"troubleshooting/#solution_1","title":"Solution:","text":"<p>The Dailies Tool relies on correct configurations in the <code>constants.py</code> file. Missing or incorrect API URLs, authentication tokens, or other paths can cause errors during execution.</p> <p>Make sure the following are configured properly: - API URLs: Ensure any URL or endpoint paths are correct. - Authentication tokens: Make sure you\u2019ve added any required tokens for authentication with services, if applicable. - Paths: Ensure the paths to software like FFmpeg, Nuke, or RV are correct in <code>constants.py</code>.</p> <p>You can find the configuration section in <code>constants.py</code> and update the following values:</p> <pre><code># Example of config section in constants.py\nFFMPEG_PATH = \"/path/to/ffmpeg\"  # Update this to the correct FFmpeg path\nNUKE_PATH = \"/path/to/nuke\"      # Update this to the correct Nuke path\nRV_PATH = \"/path/to/rv\"          # Update this to the correct RV path\n</code></pre> <p>If the tool isn\u2019t working as expected, double-check this file and ensure all the necessary paths and tokens are filled out properly.</p>"},{"location":"troubleshooting/#3-issue-missing-python-dependencies","title":"3. Issue: Missing Python Dependencies","text":""},{"location":"troubleshooting/#solution_2","title":"Solution:","text":"<p>If you're encountering an error related to missing Python packages or dependencies, ensure you\u2019ve installed all required libraries by running:</p> <pre><code># Install all the required Python packages from the requirements.txt file\npip install -r requirements.txt\n</code></pre> <p>If you\u2019re still facing issues, it may help to: - Verify your Python version by running:</p> <pre><code>  # Check your Python version to make sure you're using Python 3.x\n  python --version\n</code></pre> <p>Ensure you\u2019re using Python 3.x, as Python 2.x might not work with the dependencies required by the tool.</p> <ul> <li>Check that <code>pip</code> is up to date by running:</li> </ul> <pre><code>  # Upgrade pip to the latest version\n  pip install --upgrade pip\n</code></pre>"},{"location":"troubleshooting/#4-issue-image-sequence-not-found-or-not-loaded","title":"4. Issue: Image Sequence Not Found or Not Loaded","text":""},{"location":"troubleshooting/#solution_3","title":"Solution:","text":"<p>If the tool cannot find or load your image sequence, it could be due to an incorrect file path or missing files.</p> <ul> <li>Ensure that the input path to the image sequence is correct and that all the files exist.</li> <li>Check that the sequence is named correctly, and that the frame range is continuous (e.g., <code>frame_001.exr</code>, <code>frame_002.exr</code>, etc.).</li> <li>If the sequence is on a network drive or an external disk, make sure the drive is connected and accessible.</li> </ul> <p>Verify your input path by using the following command:</p> <pre><code># Check if your image sequence files are in the correct directory\nls /path/to/image_sequence\n</code></pre> <p>If the files are listed correctly, try loading the sequence again.</p>"},{"location":"troubleshooting/#5-issue-tool-crashes-or-freezes-during-processing","title":"5. Issue: Tool Crashes or Freezes During Processing","text":""},{"location":"troubleshooting/#solution_4","title":"Solution:","text":"<p>If the tool crashes or freezes, check the following:</p> <ul> <li>Memory Usage: If you're working with high-resolution image sequences (e.g., EXR files), the tool might run out of memory. Try reducing the resolution or converting to a lighter format (like JPG) before processing.</li> <li>Output Path: Ensure that the output path where you want to save the result exists and is writable. You may need to create the output folder manually.</li> <li>Logs: Check the logs or console output to identify any specific errors related to the crash. This could provide more information about what went wrong.</li> </ul> <p>You can try running the tool with reduced settings to check if the problem persists:</p> <pre><code># Run the tool with a smaller resolution and JPG output to reduce load\npython dailies_tool.py --resolution 1280x720 --format jpg\n</code></pre> <p>This command will generate a smaller output and might avoid memory or performance issues.</p>"},{"location":"troubleshooting/#6-issue-permissions-issues","title":"6. Issue: Permissions Issues","text":""},{"location":"troubleshooting/#solution_5","title":"Solution:","text":"<p>If you're running into permission errors (e.g., \"Permission denied\" when accessing files or folders), try the following:</p> <ul> <li>Check Folder Permissions: Ensure that the user running the tool has appropriate read/write permissions for the input and output folders.</li> <li>Run as Administrator: On Windows, try running the terminal or command prompt as an Administrator. On macOS or Linux, you can use <code>sudo</code> to run the tool with elevated privileges.</li> </ul> <pre><code># Use sudo to run the tool with elevated privileges if needed\nsudo python dailies_tool.py\n</code></pre> <p>Make sure to only use <code>sudo</code> if you understand the implications of running commands with elevated privileges.</p> <p>If none of these solutions resolve your issue, feel free to open an issue in the project's GitHub repository or contact me for further assistance.</p>"},{"location":"user_guide/","title":"User Guide for Dailies Tool UI","text":"<p>The Dailies Tool UI provides an easy-to-use interface for entering project information, artist information and render settings. This guide will walk you through the features and how to interact with the tool.</p>"},{"location":"user_guide/#features","title":"Features","text":""},{"location":"user_guide/#1-input-fields-for-video-information","title":"1. Input Fields for Video Information","text":"<p>The form allows users to input essential metadata related to the video or image sequence being processed. The following fields are available:</p> <ul> <li>Path: Enter the path to the image sequence or video file. Use the Browse button to open a file dialog and select the file.</li> <li>Version Name: Enter a version name for the video or image sequence.</li> <li>Description: A text field to enter a brief description of the video or image sequence.</li> <li>Artist: The name of the artist responsible for this version of the file.</li> <li>Link: A link related to the file or project, such as a URL to a project or a reference document.</li> <li>Task: The specific task the video or image sequence corresponds to.</li> <li>Project: The name of the project the video or image sequence is part of.</li> </ul>"},{"location":"user_guide/#2-render-settings","title":"2. Render Settings","text":"<p>The Render Settings section includes various fields for selecting render options and configuring the output format.</p> <ul> <li>Preset: Choose from available presets or select \"None\" to customize settings manually.</li> <li>Engine: Select the engine to use for rendering (FFmpeg, Nuke, NukeTemplate, or RVIO).</li> <li>FPS: Enter the frames per second for the output.</li> <li>Resolution: Specify the resolution for the output file.</li> <li>Codec: Enter the codec to use for encoding.</li> <li>Extension: Specify the file extension for the output files (e.g., <code>.mp4</code>, <code>.exr</code>).</li> <li>Slate: Enable or disable slate (usually used for preview purposes in the VFX industry).</li> <li>Template: For the \"NukeTemplate\" engine, specify a path to a Nuke template file. The \"Browse...\" button allows you to select the template from your file system.</li> </ul>"},{"location":"user_guide/#3-file-dialogs","title":"3. File Dialogs","text":"<ul> <li>Browse Button: The \"Browse...\" button allows you to select the image sequence or video file through a file dialog. It is available next to the \"Path\" field.</li> <li>Template Browse Button: For NukeTemplate engine, the \"Browse...\" button allows you to select a Nuke template file.</li> </ul>"},{"location":"user_guide/#4-submit-button","title":"4. Submit Button","text":"<p>Once all the required fields are filled, clicking the Submit button will log all the input data. This helps to keep track of the user's selections for debugging and tracking purposes.</p>"},{"location":"user_guide/#getting-started","title":"Getting Started","text":"<p>Follow these steps to use the Dailies Tool UI:</p>"},{"location":"user_guide/#1-launching-the-tool","title":"1. Launching the Tool","text":"<p>To launch the Dailies Tool UI, ensure you have the necessary dependencies installed and your environment set up correctly.</p> <p>Run the following command to start the tool:</p> <pre><code># Run this command to launch the Dailies Tool UI\npython ui.py\n</code></pre> <p>The UI window will appear, and you can start filling out the form.</p>"},{"location":"user_guide/#2-filling-out-the-form","title":"2. Filling Out the Form","text":"<ul> <li>Path: Click the Browse button next to the Path field to open a file dialog and select your video or image sequence.</li> <li>Version Name: Enter the version name of the video/image sequence.</li> <li>Description: Provide a short description of the video or image sequence.</li> <li>Artist: Enter the name of the artist responsible for the current file.</li> <li>Link: Add a relevant link, such as a project link or reference URL.</li> <li>Task: Enter the task associated with the video or image sequence.</li> <li>Project: Enter the project name to which the video or image sequence belongs.</li> </ul>"},{"location":"user_guide/#3-choosing-render-settings","title":"3. Choosing Render Settings","text":"<ul> <li>Preset: If available, select a preset from the dropdown. The options will load based on predefined settings in the presets folder.</li> <li>Engine: Choose the rendering engine. Available engines include:</li> <li>FFmpeg: The default option for video encoding.</li> <li>Nuke: Use this option for Nuke-specific workflows.</li> <li>NukeTemplate: Use a Nuke template for rendering.</li> <li>RVIO: Use this for RVIO-based workflows.</li> <li>FPS: Specify the FPS for the render.</li> <li>Resolution: Define the resolution for the output.</li> <li>Codec: Choose the codec for the output file (e.g., H.264, ProRes).</li> <li>Extension: Select the file extension (e.g., <code>.mp4</code>, <code>.jpg</code>, <code>.exr</code>).</li> <li>Slate: Check the Slate box if you want a slate to be added to the output.</li> <li>Template: If you're using the NukeTemplate engine, you can choose a template file using the Browse button.</li> </ul>"},{"location":"user_guide/#4-submitting-the-form","title":"4. Submitting the Form","text":"<p>Once all the fields are filled out, click the Submit button to log the provided data. This will help track the input information for debugging and reference purposes. The submitted data is logged to both the console and a log file.</p>"},{"location":"user_guide/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues with the Dailies Tool UI, refer to the Troubleshooting Guide for solutions to common problems.</p>"},{"location":"user_guide/#code-overview","title":"Code Overview","text":"<p>Here\u2019s an overview of the relevant code for interacting with the tool:</p>"},{"location":"user_guide/#1-setting-up-the-logging","title":"1. Setting Up the Logging","text":"<p>The logging configuration is set up at the beginning of the <code>ui.py</code> file. This ensures that all user input is logged for debugging and tracking.</p> <pre><code># Set up logging\nlogging.basicConfig(\n    level=logging.INFO,  # Set the default logging level to INFO\n    format=LOG_FORMAT,\n    handlers=[\n        logging.StreamHandler(),  # Log to the console\n        logging.FileHandler(LOG_FILE_PATH)  # Log to the log file\n    ]\n)\n</code></pre>"},{"location":"user_guide/#2-creating-the-ui","title":"2. Creating the UI","text":"<p>The UI is created using PySide6, a Python binding for Qt. The layout is composed of multiple input fields, dropdowns, and buttons, as described earlier.</p> <pre><code># Example UI layout for form and render settings\nform_layout = QFormLayout()\nself.path_input = QLineEdit(self)  # Path input field\nself.browse_button = QPushButton(\"Browse...\", self)  # Browse button\nself.browse_button.clicked.connect(self.browse_file)  # Connect to file dialog\n</code></pre>"},{"location":"user_guide/#3-handling-form-submission","title":"3. Handling Form Submission","text":"<p>When the user clicks the Submit button, the form data is logged, and the application is ready for the next operation.</p> <pre><code>def on_submit(self):\n    \"\"\"Handles the submission of the form data, logging all fields.\"\"\"\n    # Collect user input and log it\n    logging.info(f\"Path: {path}\")\n    logging.info(f\"Version Name: {version}\")\n    logging.info(f\"Description: {description}\")\n    # Log all other input fields...\n    logging.info(\"Data submitted successfully!\")\n</code></pre> <p>For more advanced usage, custom presets can be created and stored in the presets folder. These presets are loaded when the tool starts up and can be selected from the Preset dropdown.</p> <p>If you have additional questions or need further assistance, please refer to the Troubleshooting Guide.</p>"}]}